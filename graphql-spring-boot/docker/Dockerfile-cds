FROM alpine/java:21.0.4-jdk AS packager
ARG CUSTOM_JRE=/opt/min_jre
ARG JAR_FILE=target/g*.jar

COPY $JAR_FILE app.jar

RUN /opt/java/openjdk/bin/jlink \
    --module-path /opt/java/openjdk/jmods \
    --verbose \
    --add-modules java.base,java.desktop,java.instrument,java.logging,java.management,java.naming,java.security.jgss,java.sql,java.xml,jdk.unsupported,jdk.management \
    --compress zip-6 \
    --no-header-files \
    --output $CUSTOM_JRE
RUN mkdir $CUSTOM_JRE/cds
RUN $CUSTOM_JRE/bin/java -Xshare:dump
RUN $CUSTOM_JRE/bin/java -Djarmode=tools -jar app.jar extract --destination app

WORKDIR app
RUN #$CUSTOM_JRE/bin/java -XX:DumpLoadedClassList=$CUSTOM_JRE/cds/classes.lst -XX:ArchiveClassesAtExit=$CUSTOM_JRE/cds/app.jsa -Dspring.context.exit=onRefresh -jar app.jar
RUN $CUSTOM_JRE/bin/java -XX:ArchiveClassesAtExit=$CUSTOM_JRE/cds/app.jsa -Dspring.context.exit=onRefresh -jar app.jar


FROM alpine:3.22.1 AS runner
COPY --from=packager /opt/min_jre /opt/min_jre

ENV JAVA_HOME=/opt/min_jre
ENV PATH="$JAVA_HOME/bin:$PATH"
ENV SERVER_PORT=8080
ENV MANAGEMENT_SERVER_PORT=8070
ENV SERVER_SERVLET_CONTEXT_PATH="/"
ENV	SPRING_PROFILES_ACTIVE=h2

WORKDIR app
COPY --from=packager app/lib/ ./lib
COPY --from=packager app/app.jar ./
COPY docker/run.sh run.sh

EXPOSE 8080 8070

ENTRYPOINT ["sh", "/app/run.sh"]
